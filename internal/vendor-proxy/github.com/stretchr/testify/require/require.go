// This code is generated automatically.
// Don't modify it manually.

//go:generate go run ./_codegen/require.go -o ./require.go -v 1.8.4

package require

import (
	"github.com/componego/componego/libs/vendor-proxy"
	"github.com/stretchr/testify/require"
)

func InitPackage() error {
	r := vendor_proxy.Get("testify/require")
	// noinspection SpellCheckingInspection
	functions := map[string]any{
		"Condition":            require.Condition,
		"Conditionf":           require.Conditionf,
		"Contains":             require.Contains,
		"Containsf":            require.Containsf,
		"DirExists":            require.DirExists,
		"DirExistsf":           require.DirExistsf,
		"ElementsMatch":        require.ElementsMatch,
		"ElementsMatchf":       require.ElementsMatchf,
		"Empty":                require.Empty,
		"Emptyf":               require.Emptyf,
		"Equal":                require.Equal,
		"EqualError":           require.EqualError,
		"EqualErrorf":          require.EqualErrorf,
		"EqualExportedValues":  require.EqualExportedValues,
		"EqualExportedValuesf": require.EqualExportedValuesf,
		"EqualValues":          require.EqualValues,
		"EqualValuesf":         require.EqualValuesf,
		"Equalf":               require.Equalf,
		"Error":                require.Error,
		"ErrorAs":              require.ErrorAs,
		"ErrorAsf":             require.ErrorAsf,
		"ErrorContains":        require.ErrorContains,
		"ErrorContainsf":       require.ErrorContainsf,
		"ErrorIs":              require.ErrorIs,
		"ErrorIsf":             require.ErrorIsf,
		"Errorf":               require.Errorf,
		"Eventually":           require.Eventually,
		"EventuallyWithT":      require.EventuallyWithT,
		"EventuallyWithTf":     require.EventuallyWithTf,
		"Eventuallyf":          require.Eventuallyf,
		"Exactly":              require.Exactly,
		"Exactlyf":             require.Exactlyf,
		"Fail":                 require.Fail,
		"FailNow":              require.FailNow,
		"FailNowf":             require.FailNowf,
		"Failf":                require.Failf,
		"False":                require.False,
		"Falsef":               require.Falsef,
		"FileExists":           require.FileExists,
		"FileExistsf":          require.FileExistsf,
		"Greater":              require.Greater,
		"GreaterOrEqual":       require.GreaterOrEqual,
		"GreaterOrEqualf":      require.GreaterOrEqualf,
		"Greaterf":             require.Greaterf,
		"HTTPBodyContains":     require.HTTPBodyContains,
		"HTTPBodyContainsf":    require.HTTPBodyContainsf,
		"HTTPBodyNotContains":  require.HTTPBodyNotContains,
		"HTTPBodyNotContainsf": require.HTTPBodyNotContainsf,
		"HTTPError":            require.HTTPError,
		"HTTPErrorf":           require.HTTPErrorf,
		"HTTPRedirect":         require.HTTPRedirect,
		"HTTPRedirectf":        require.HTTPRedirectf,
		"HTTPStatusCode":       require.HTTPStatusCode,
		"HTTPStatusCodef":      require.HTTPStatusCodef,
		"HTTPSuccess":          require.HTTPSuccess,
		"HTTPSuccessf":         require.HTTPSuccessf,
		"Implements":           require.Implements,
		"Implementsf":          require.Implementsf,
		"InDelta":              require.InDelta,
		"InDeltaMapValues":     require.InDeltaMapValues,
		"InDeltaMapValuesf":    require.InDeltaMapValuesf,
		"InDeltaSlice":         require.InDeltaSlice,
		"InDeltaSlicef":        require.InDeltaSlicef,
		"InDeltaf":             require.InDeltaf,
		"InEpsilon":            require.InEpsilon,
		"InEpsilonSlice":       require.InEpsilonSlice,
		"InEpsilonSlicef":      require.InEpsilonSlicef,
		"InEpsilonf":           require.InEpsilonf,
		"IsDecreasing":         require.IsDecreasing,
		"IsDecreasingf":        require.IsDecreasingf,
		"IsIncreasing":         require.IsIncreasing,
		"IsIncreasingf":        require.IsIncreasingf,
		"IsNonDecreasing":      require.IsNonDecreasing,
		"IsNonDecreasingf":     require.IsNonDecreasingf,
		"IsNonIncreasing":      require.IsNonIncreasing,
		"IsNonIncreasingf":     require.IsNonIncreasingf,
		"IsType":               require.IsType,
		"IsTypef":              require.IsTypef,
		"JSONEq":               require.JSONEq,
		"JSONEqf":              require.JSONEqf,
		"Len":                  require.Len,
		"Lenf":                 require.Lenf,
		"Less":                 require.Less,
		"LessOrEqual":          require.LessOrEqual,
		"LessOrEqualf":         require.LessOrEqualf,
		"Lessf":                require.Lessf,
		"Negative":             require.Negative,
		"Negativef":            require.Negativef,
		"Never":                require.Never,
		"Neverf":               require.Neverf,
		"Nil":                  require.Nil,
		"Nilf":                 require.Nilf,
		"NoDirExists":          require.NoDirExists,
		"NoDirExistsf":         require.NoDirExistsf,
		"NoError":              require.NoError,
		"NoErrorf":             require.NoErrorf,
		"NoFileExists":         require.NoFileExists,
		"NoFileExistsf":        require.NoFileExistsf,
		"NotContains":          require.NotContains,
		"NotContainsf":         require.NotContainsf,
		"NotEmpty":             require.NotEmpty,
		"NotEmptyf":            require.NotEmptyf,
		"NotEqual":             require.NotEqual,
		"NotEqualValues":       require.NotEqualValues,
		"NotEqualValuesf":      require.NotEqualValuesf,
		"NotEqualf":            require.NotEqualf,
		"NotErrorIs":           require.NotErrorIs,
		"NotErrorIsf":          require.NotErrorIsf,
		"NotNil":               require.NotNil,
		"NotNilf":              require.NotNilf,
		"NotPanics":            require.NotPanics,
		"NotPanicsf":           require.NotPanicsf,
		"NotRegexp":            require.NotRegexp,
		"NotRegexpf":           require.NotRegexpf,
		"NotSame":              require.NotSame,
		"NotSamef":             require.NotSamef,
		"NotSubset":            require.NotSubset,
		"NotSubsetf":           require.NotSubsetf,
		"NotZero":              require.NotZero,
		"NotZerof":             require.NotZerof,
		"Panics":               require.Panics,
		"PanicsWithError":      require.PanicsWithError,
		"PanicsWithErrorf":     require.PanicsWithErrorf,
		"PanicsWithValue":      require.PanicsWithValue,
		"PanicsWithValuef":     require.PanicsWithValuef,
		"Panicsf":              require.Panicsf,
		"Positive":             require.Positive,
		"Positivef":            require.Positivef,
		"Regexp":               require.Regexp,
		"Regexpf":              require.Regexpf,
		"Same":                 require.Same,
		"Samef":                require.Samef,
		"Subset":               require.Subset,
		"Subsetf":              require.Subsetf,
		"True":                 require.True,
		"Truef":                require.Truef,
		"WithinDuration":       require.WithinDuration,
		"WithinDurationf":      require.WithinDurationf,
		"WithinRange":          require.WithinRange,
		"WithinRangef":         require.WithinRangef,
		"YAMLEq":               require.YAMLEq,
		"YAMLEqf":              require.YAMLEqf,
		"Zero":                 require.Zero,
		"Zerof":                require.Zerof,
	}
	for name, fn := range functions {
		if err := r.AddFunction(name, fn); err != nil {
			return err
		}
	}
	return nil
}
